#summary Learn to quickly create an application on Android and Java with Netconf4Android.

==Introduction==

This guide shows how to create a simple application using the API.

Our aim is to implement a simple Java application that controls a toaster through a Netconf server that has this capability:

     http://netconfcentral.org/ns/toaster

All the features that make the capability to control a toaster is described through the following YANG module:

    [http://www.netconfcentral.org/modulereport/toaster toaster.yang]

Our example, we plan to use a YUMA Server that has the ability to make this capability available in a dynamic way through the LOAD Operation.

To learn how to install the server, please consult the appropriate documentation of the project and in particular, for this example, the following guides:

    [http://www.netconfcentral.org/static/manuals/yuma-installation-guide.pdf Yuma Installation Guide]

    [http://www.netconfcentral.org/static/manuals/yuma-quickstart-guide.pdf Yuma Quickstart Guide]

The home directory of the YUMA Tools project is:

    http://www.netconfcentral.org

Once you have familiarized yourself with the server you can easily access the next step.

Please note that for our example, for simplicity, the user with which you connect must have *superuser privileges* on the YUMA Server.

Only a super user can dynamically load a module and initialize it.

A better Android (and no Java) version of our example is [http://code.google.com/p/netconf4android/downloads/detail?name=Netconf4Android.zip Android Netconf Toaster].

This is an Eclipse project that you can safely explore and from which to take ideas for your Android applications.

==Step 1: Setup the Development Environment on Eclipse==

First you must download the *netconf4Android-Binaries.zip* archive of the last version of *netconf4Android API* at this URL:

     http://code.google.com/p/netconf4android/downloads/list

You'll find in the archive the libraries to use.
Unzip the archive to a location of your choice.

Please read very carefully the *_README.txt* and *_LICENSE.txt* files.

You will find them into the *netconf4Android-Binaries* directory.

The libraries you need to include in your project are:

   * netconf4android.jar - The netconf4Android API
   * lib/ganymed-ssh2-build210/ganymed-ssh2-build210.jar - The Ganymed-SSH2 API to use the SSH-2 transport protocol.


* Please, open Eclipse now and create a new project called 'Netconf Toaster':

   * File -> New -> Java Project

   * Insert this values into the form:

      Project name: Netconf Toaster

   * Press the OK button.

* After creating the project, create the public class 'Toaster' as the entry point for the application:

   * File -> New -> Class

   * Insert this values into the form:

      Package: com.vhosting.netconf.example (or a package of your choice)

      Nane: Toaster

      Add the public static void main method.

   * Press the OK button.

* At this point, you will need to add the libraries to the project to use them:

   * Project -> Properties -> Java Build Path -> Add External JARs...

   * Select the location of the netconf4android.jar library and repeat the action for the ganymed-ssh2-build210.jar library.

   * Press the OK button.

The development environment is ready now.
|| *Step 1 - Video 1* || *Step 1 - Video 2* ||
|| <wiki:video url="http://www.youtube.com/watch?v=8uTzylpXzmk"/> || <wiki:video url="http://www.youtube.com/watch?v=igCGVY5lNPM"/> ||

==Step 2: Toaster Capability declaration==

The first step for our example is the definition of Toaster Capability to be used internally to the code.

Data that are retrieved from the Toaster YANG module: [http://www.netconfcentral.org/modulereport/toaster toaster.yang]

{{{

package com.vhosting.netconf.example;

import com.vhosting.netconf.yuma.YANGCapability;

public class Toaster {

	
	
	/*
	 * These data were obtained by consulting the YANG module: 
	 * 
	 *     toaster.yang
	 *
	 * A copy of the YANG module can be found at URL:
	 *
	 *     http://www.netconfcentral.org/modulereport/toaster
	 *
	 */
	private YANGCapability toasterCap = 
		new YANGCapability("http://netconfcentral.org/ns/toaster", 
				"http://netconfcentral.org/ns/toaster", 
				"toast", "toaster");
	
	
	// Connection parameters
	// ...
	
	
	/**
	 * Toaster Entry Point.
	 */
	public static void main(String[] args) {

	}

}

}}}

|| *Step 2 - Video 1* ||
|| <wiki:video url="http://www.youtube.com/watch?v=atnvbsQi8B0"/> ||

==Step 3: Connect to the Server==
After declaring the Toaster Capability, as essential, we set the SSH-2 connection to the NETCONF server.
{{{

package com.vhosting.netconf.example;

import java.net.InetSocketAddress;

import com.vhosting.netconf.frame.RpcHandler;
import com.vhosting.netconf.transport.NetconfCatcherListener;
import com.vhosting.netconf.transport.NetconfTransportEvent;
import com.vhosting.netconf.transport.ssh.NetconfSshCather;
import com.vhosting.netconf.transport.ssh.SshAuthInfo;
import com.vhosting.netconf.yuma.YANGCapability;

public class Toaster {

	
	
	/*
	 * These data were obtained by consulting the YANG module: 
	 * 
	 *     toaster.yang
	 *
	 * A copy of the YANG module can be found at URL:
	 *
	 *     http://www.netconfcentral.org/modulereport/toaster
	 *
	 */
	private YANGCapability toasterCap = 
		new YANGCapability("http://netconfcentral.org/ns/toaster", 
				"http://netconfcentral.org/ns/toaster", 
				"toast", "toaster");
	
	
	// SSH-2 Connection parameters
	
	// The Netconf server host. Note: The dafault port is 830.
	private static InetSocketAddress host = 
		new InetSocketAddress("vhosting.eu.org", 22);
	
	// The user name.
	private static String uname = "netconf";
	
	// The password.
	private static String passwd = "pippo";
	
	// The SSH-2 Netconf Sybsystem.
	private static String subsystem = "netconf";
	
	
	/**
	 * Toaster Entry Point.
	 */
	public static void main(String[] args) {

		// Authentication Info.
		SshAuthInfo ai = new SshAuthInfo(host, uname, passwd);
		
		// The Netconf Catcher instance.
		NetconfSshCather catcher = 
			new NetconfSshCather("My Toaster Example", ai, subsystem);
		
		// The connection.
		Runnable runnableConnection = catcher.getRunnableConnection();
		
		// Set the Netconf Catcher Listener.
		// Note: This is the entry point for Netconf operations.
		catcher.setNetconfCatcherListener(new NetconfCatcherListener() {
			
			
			// Transport events here.
			@Override
			public void processTransportEvents(NetconfTransportEvent arg0) {
				// ...
				
			}
			
			// RPC requests here.
			@Override
			public void processReadyForRpcRequests(RpcHandler arg0) {
				// ...
				
			}
		});
		
		
		// Start the connection here.
		Thread t = new Thread(runnableConnection);
		t.start();
		
	}

}

}}}

|| *Step 3 - Video 1* ||
|| <wiki:video url="http://www.youtube.com/watch?v=GSgx2RCAZbg"/> ||


==Step 4: Enable the Log Stream==
Now we add some instructions that allow us to record the activity of the connection.
This feature is likely to be essential for debugging.
In our example we want to monitor all activity that affects both the protocol that the messages sent or received.

{{{

package com.vhosting.netconf.example;

...
import com.vhosting.netconf.transport.NetconfCatcher;
import com.vhosting.netconf.transport.NetconfCatcher.LogLevel;
...

public class Toaster {
	
        ...
	
	/**
	 * Toaster Entry Point.
	 */
	public static void main(String[] args) {


                // The log is enabled.
		
		// This level ensures that all server activity, 
		// including the messages, are written to the log stream.
		NetconfCatcher.enableLog(LogLevel.MESSAGES);
		
		
		// The log stream is redirected to STDERR.
		NetconfCatcher.setLogStream(System.err);

                ...

	}
}

}}}

|| *Step 4 - Video 1* ||
|| <wiki:video url="http://www.youtube.com/watch?v=5nHzhnGru0A"/> ||


==Step 5: Transport Events==

Now we want to handle events generated by the transport protocol, such as the connection closing or connection errors.

{{{

package com.vhosting.netconf.example;

...
import com.vhosting.netconf.frame.RpcHandler;
import com.vhosting.netconf.transport.NetconfCatcher.LogLevel;
import com.vhosting.netconf.transport.NetconfCatcherListener;
import com.vhosting.netconf.transport.NetconfTransportEvent;
import com.vhosting.netconf.transport.NetconfTransportEvent.EventType;
...

public class Toaster {
	
	...
	
	/**
	 * Toaster Entry Point.
	 */
	public static void main(String[] args) {

		...
		
		// Set the Netconf Catcher Listener.
		// Note: This is the entry point for Netconf operations.
		catcher.setNetconfCatcherListener(new NetconfCatcherListener() {
			
			
			// Transport events here.
			@Override
			public void processTransportEvents(NetconfTransportEvent event) {
				
				// Get the transport event type.
				EventType eventType = event.getEventType();
				
				// The connection cannot be opened for any reason.
				if (eventType == EventType.CONNECTION_CANNOT_BE_OPENED)
				{
					System.out.println("The connection cannot be opened for any reason.");
				}
				
				// The connection is closed by server.
				else if (eventType == EventType.CONNECTION_CLOSED_BY_SERVER)
				{
					System.out.println("The connection is closed by server.");
				}
				
				// The connection is closed by user ( or by this client ).
				else if (eventType == EventType.CONNECTION_CLOSED_BY_USER)
				{
					System.out.println("The connection is closed by user.");
				}
				
				// If the event was generated due to an abnormal 
				// situation, even the exception is returned with the event.
				Exception e = event.getTransortErrorException();
				
				// Check the existence of the exception.
				if (e != null)
				{
					
					// Notification of the abnormal situation occurring.
					
					System.out.println("There was an abnormal situation.");
					System.out.println("This is the exception {");
					
					e.printStackTrace();
					
					System.out.println("}");
				}
				
			}
			
			// RPC requests here.
			@Override
			public void processReadyForRpcRequests(RpcHandler arg0) {
				// ...
				
			}
		});
		
		
		...
		
	}

}

}}}

|| *Step 5 - Video 1* ||
|| <wiki:video url="http://www.youtube.com/watch?v=RyOJXW26vkU"/> ||


==Step 6: Program Flow==

{{{

package com.vhosting.netconf.example;

...
import com.vhosting.netconf.frame.RpcHandler;
import com.vhosting.netconf.transport.NetconfCatcherListener;
import com.vhosting.netconf.transport.ssh.NetconfSshCather;
import com.vhosting.netconf.transport.NetconfTransportEvent;
...

public class Toaster {

	...
        // The Netconf SSH-2 as attribute.
	private static NetconfSshCather catcher;
        ...
	
	/**
	 * Toaster Entry Point.
	 */
	public static void main(String[] args) {

		...
		
		// Set the Netconf Catcher Listener.
		// Note: This is the entry point for Netconf operations.
		catcher.setNetconfCatcherListener(new NetconfCatcherListener() {
			
			
			// Transport events here.
			@Override
			public void processTransportEvents(NetconfTransportEvent event) {
				
				...
				
			}
			
			// RPC requests here.
			@Override
			public void processReadyForRpcRequests(RpcHandler handler) {
				
				try
				{
					// Upload your toaster if it does not 
					// exist on the server and quit if you can not load the toaster.
					if (loadToaster(handler))
					{
						// If the toaster is available, it makes toast 
						// until the user decides to quit.
						if (!makeToasts(handler))
						{
							disconnectAndExit();
						}
					}
					else disconnectAndExit();
				}
				catch(Exception e)
				{
					// Intercept all exceptions That May Occur 
					// while messages are sent and received.
					
					System.out.println("There is a problem in sending or receiving messages.");
					System.out.println("This is the exception {");
					
					e.printStackTrace();
					
					System.out.println("}");
				}
			}
		});
		
		
		...
		
	}

	/*
	 * It makes toast until the user decides to quit.
	 */
	protected static boolean makeToasts(RpcHandler handler) {
		// ...
		return false;
	}

        /*
         * Upload your toaster if it does not exist on the server 
         * and quit if you can not load the toaster.
         */
	protected static boolean loadToaster(RpcHandler handler) {
		// ...
		return false;
	}

	/*
	 * Disconnect and exit.
	 */
	protected static void disconnectAndExit() {
		
		// Disconnect.
		catcher.disconnect();
		
		// Exit.
		System.exit(0);
		
	}

}

}}}


|| *Step 6 - Video 1* ||
|| <wiki:video url="http://www.youtube.com/watch?v=yELzp1iFOEE"/> ||


==Step 7: Load the Toaster YANG Module and Initialize It==

|| *Step 7 - Video 1* || *Step 7 - Video 2* || *Step 7 - Video 3* ||
|| <wiki:video url="http://www.youtube.com/watch?v=9EGwSlzO5U0"/> || <wiki:video url="http://www.youtube.com/watch?v=W7us9IcMrMQ"/> || <wiki:video url="http://www.youtube.com/watch?v=Cs0cROQITyQ"/> ||


==Step 8: Enable Notifications==

|| *Step 8 - Video 1* || *Step 8 - Video 2* ||
|| <wiki:video url="http://www.youtube.com/watch?v=1IXcrtceTXc"/> || <wiki:video url="http://www.youtube.com/watch?v=8FYfXPNI79Y"/> ||


==Step 9: Make Toasts==

|| *Step 9 - Video 1* ||
|| <wiki:video url="http://www.youtube.com/watch?v=ye67QLCsFMQ"/> ||

==Step 10: Final Note==


Copyright (c) 2010 Giuseppe Palmeri